<?eclipse.ant.import ?>
<project name="ECMOjo" default="webstart" basedir=".">
  <target name="globals">
    <!-- Globals for projects -->
    <property name="global.release.version" value="2.4.0" />
  </target> 
  <!-- *********************************************************************** -->
  <target name="pre-init">
    <!-- Global Release time -->
    <tstamp>
      <format property="TSTAMP" pattern="HH:mm:ss" />
      <format property="MINUTESTAMP" pattern="HHmm" />
      <format property="DAYSTAMP" pattern="dd" />
      <format property="MONTHSTAMP" pattern="MM" />
      <format property="YEARSTAMP" pattern="yyyy" />
    </tstamp>
    <property name="date" value="${MONTHSTAMP}/${DAYSTAMP}/${YEARSTAMP}" />
    <property name="time" value="${TSTAMP}" />
    <property name="release.time" value="${YEARSTAMP}-${MONTHSTAMP}-${DAYSTAMP}.${MINUTESTAMP}" />
    <!-- Global directories -->
    <property name="src.dir" value="src" />
    <property name="conf.dir" value="conf" />
    <property name="resource.dir" value="resource" />
    <property name="scenario.dir" value="scenario" />
    <property name="extra.dir" value="extra" />
    <property name="extra-special.dir" value="extra-special" />
    <property name="doc.dir" value="doc" />
    <property name="web.dir" value="web" />
    <property name="lib.dir" value="lib" />
    <property name="lib.ant.dir" value="${lib.dir}/ant" />
    <property name="lib.project.dir" value="${lib.dir}/project" />
    <condition property="lib.rt.dir" value="${java.home}/lib/rt.jar">
      <os family="windows" />
    </condition>
    <condition property="lib.rt.dir" value="${java.home}/../Classes/classes.jar">
      <os family="mac" />
    </condition>
    <condition property="lib.jsse.dir" value="${java.home}/lib/jsse.jar">
      <os family="windows" />
    </condition>
    <condition property="lib.jsse.dir" value="${java.home}/../Classes/jsse.jar">
      <os family="mac" />
    </condition>
  </target>
  <!-- *********************************************************************** -->
  <target name="init" depends="pre-init, globals">
    <!-- Library Properties -->
    <property name="author" value="king" />
    <property name="subname" value="app" />
    <property name="subdirs" value="(app|app)(/|\\)(.*)" />
    <property name="name" value="ecmosim-${subname}" />
    <property name="release.version" value="${global.release.version}" />
    <property name="release.file" value="${basedir}/src/app/edu/hawaii/jabsom/tri/ecmo/app/ECMOAppRelease.java" />
    <filter token="release.version" value="${release.version}" />
    <filter token="release.time" value="${release.time}" />
    <property name="specialdir" value="app-live" />
    <property name="library.files" value="browsercode.jar,jgoodies-forms-1.0.4.jar,swingx-0.9.4.jar,jl1.0.jar,mp3spi1.9.2.jar,tritonus_share.jar,mail.jar,activation.jar,pnuts-1.1.jar,jsyntaxpane-0.9.5-jre5-minimal.jar" />
    <!-- Program Properties (leave as is if not needed) -->
    <property name="prg.memory" value="256" />
    <property name="prg.classfile" value="edu.hawaii.jabsom.tri.ecmo.app.ECMOApp" />
    <property name="prg.exe0" value="ECMOjo Infant,ECMOjo-Infant,${prg.memory},${prg.classfile},infant" />
    <property name="prg.exe1" value="ECMOjo Infant (Japanese),ECMOjo-Infant-JA,${prg.memory},${prg.classfile},infant_ja" />
    <property name="executables.list" value="${prg.exe0}+${prg.exe1}"/>  <!-- ${prg.exe0}+${prg.exe1} ... -->
    <!-- Java Web Start properties (leave as is if not needed) -->
    <property name="keystore.alias" value="kalias" />
    <property name="keystore.file" value="${resource.dir}/jarsign/keystore" />
    <property name="keystore.storepass" value="kpassword" />
    <property name="webstart.files.exclude" value="j3dcore.jar,j3dutils.jar,vecmath.jar" />
    <property name="webstart.title" value="ECMOjo" />
    <property name="webstart.author" value="ECMO Team" />
    <property name="webstart.description" value="ECMOjo Application" />
    <property name="webstart.scenario.dir" value=".ECMOjo" />
    <property name="webstart.url" value="http://ecmojo.sourceforge.net" />
    <property name="webstart.logo" value="webstart-logo.gif" />
    <!-- Jakarta Web Properties (leave as is if not needed) -->
    <property name="webapp.name" value="${name}" />
    <property name="webapp.manager.url" value="http://127.0.0.1:8080/manager" />
    <property name="webapp.username" value="admin" />
    <property name="webapp.password" value="" />
  </target>
  <!-- *********************************************************************** -->
  <target name="post-init" depends="init">
    <!-- Global Test files -->
    <property name="test.files" value="**/Test*" />
    <!-- Global directories -->
    <property name="build.dir" value="build/${subname}" />
    <property name="build.src.dir" value="${build.dir}/src" />
    <property name="build.dest.dir" value="${build.dir}/classes" />
    <property name="build.src_html.dir" value="${build.dir}/src_html" />
    <property name="build.api.dir" value="${build.dir}/api" />
    <property name="build.size.dir" value="${build.dir}/size_data" />
    <property name="build.test.dir" value="${build.dir}/test_output" />
    <property name="build.library.dir" value="${build.dir}/library" />
    <property name="build.libconf.dir" value="${build.dir}/libconf" />
    <property name="build.app.dir" value="${build.dir}/application" />
    <property name="build.webstart.dir" value="${build.dir}/webstart" />
    <property name="build.obfuscate.dir" value="${build.dir}/obfuscate" />
    <property name="build.webapp.dir" value="${build.dir}/webapp" />
    <property name="build.war.dir" value="${build.dir}/war" />
    <property name="dist_name" value="ECMOjo_${global.release.version}" />
    <property name="dist.dir" value="${build.dir}/dist" />
    <property name="dist_src_base" value="${dist.dir}/dist_src" />
    <property name="dist_src" value="${dist_src_base}/${dist_name}" />
    <property name="dist_macos_base" value="${dist.dir}/dist_macos" />
    <property name="dist_macos" value="${dist_macos_base}/${dist_name}" />
    <property name="jarbundler.ver" value="jarbundler-2.2.0" />
    <property name="jarbundler.dir" value="${resource.dir}/installer/${jarbundler.ver}" />
    <property name="dist_win_base" value="${dist.dir}/dist_win" />
    <property name="dist_win" value="${dist_win_base}/${dist_name}" />
    <property name="launch4j.dir" value="${resource.dir}/installer/launch4j" />
    <!-- Load additional ant tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${lib.ant.dir}/ant-contrib-1.0b1.jar" />
    <taskdef name="jarbundler" classpath="${jarbundler.dir}/${jarbundler.ver}.jar" classname="net.sourceforge.jarbundler.JarBundler" />
    <taskdef name="launch4j" classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" classname="net.sf.launch4j.ant.Launch4jTask" />
    <!-- Jakarta-Tomcat (Catalina) - ant tasks -->
    <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask"    classpath="${lib.ant.dir}/catalina-ant.jar" />
    <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask"    classpath="${lib.ant.dir}/catalina-ant.jar" />
    <taskdef name="start"     classname="org.apache.catalina.ant.StartTask"     classpath="${lib.ant.dir}/catalina-ant.jar" />
    <taskdef name="stop"      classname="org.apache.catalina.ant.StopTask"      classpath="${lib.ant.dir}/catalina-ant.jar" />
    <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"  classpath="${lib.ant.dir}/catalina-ant.jar" />
  </target>  
  <!-- *********************************************************************** -->
  <target name="clean" depends="post-init"
          description="Delete build/ and misc other files.">
    <delete dir="${build.dir}" />
    <!-- Delete backup files left by IDE and JRefactory. -->
    <delete>
      <fileset dir="${basedir}" defaultexcludes="no" includes="**/*~" />
      <fileset dir="${basedir}" includes="src/**/*.java.*" />
    </delete>
  </target>
  <!-- *********************************************************************** -->
  <target name="eclipse-properties" if="eclipse.running">
    <!-- Use different eclipse compiler if eclipse is running -->
    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
  </target>
  <!-- *********************************************************************** -->
  <target name="prepare" depends="post-init,eclipse-properties">
    <!-- Prepare directories -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.src.dir}" />
    <mkdir dir="${build.dest.dir}" />
    <!-- Copy src files after touching the release file to update release. -->
    <touch file="${release.file}" />
    <copy todir="${build.src.dir}" filtering="on">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${src.dir}">
        <exclude name="**/*.class" />
      </fileset>
    </copy>
  </target>
  <!-- *********************************************************************** -->
  <target name="compile" depends="prepare">
    <!-- compile to dest directory -->
    <javac srcdir="${build.src.dir}"
           destdir="${build.dest.dir}"
           nowarn="on">
      <compilerarg value="-Xlint:deprecation" />
      <classpath>
	      <fileset dir="${lib.project.dir}">
	        <include name="**/*.jar" />
	      </fileset>
      </classpath>
    </javac>
    <!-- copy xml (hibernate) files -->
    <copy todir="${build.dest.dir}">
      <fileset dir="${build.src.dir}">
        <include name="**/hibernate.cfg.xml" />
        <include name="**/*.hbm.xml" />
        <include name="**/*.properties" />
      </fileset>
    </copy>
  </target>
  <!-- *********************************************************************** -->
  <target name="checkstyle" depends="compile">
    <taskdef resource="checkstyletask.properties" classpath="${lib.ant.dir}/checkstyle-all-4.2.jar"/>
    <!-- checkstyle now: take out: <module name="RedundantThrows"/> because it crashes checkstyle. -->
    <checkstyle config="${resource.dir}/Checkstyle/Checkstyle.xml">
      <classpath>
        <pathelement location="${build.dest.dir}" />
        <fileset dir="${lib.project.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      <fileset dir="${build.src.dir}">
         <include name="**/*.java" />
      </fileset>
    </checkstyle>
  </target>  
  <!-- *********************************************************************** -->
  <target name="i18n" depends="checkstyle">
    <taskdef name="i18n" classname="net.java.hulp.i18n.buildtools.I18NTask" classpath="${lib.ant.dir}/net.java.hulp.i18ntask-2.1-SNAPSHOT.jar"/>
    <i18n dir="${build.dest.dir}"
          file="${conf.dir}/app/bundle/MessagesBundle.properties"
          prefix=""
          pattern="([a-z]+\.[A-Za-z0-9]+)(\[i18n\]: )(.*)" />
  </target>  
  <!-- *********************************************************************** -->
  <target name="test" depends="i18n"
          description="Run JUnit tests (classes whose name starts with Test) and generate a report.">
    <mkdir dir="${build.test.dir}" />
    <!-- add scenario dir for testing -->
    <copy todir="${build.test.dir}/scenario">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${scenario.dir}/write" />
    </copy>
    <copy todir="${build.test.dir}/scenario" overwrite="true">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${scenario.dir}/write-over" />
    </copy>
    <!-- Run the tests, which are all classes whose name starts with 'Test'. -->
    <junit printsummary="yes" haltonfailure="no" dir="${build.test.dir}">
      <classpath>
        <pathelement location="${lib.project.dir}/junit.jar" />
        <pathelement location="${build.libconf.dir}/${name}-conf.jar" />
        <pathelement location="${build.dest.dir}" />
        <pathelement path="${lib.project.dir}" />
      </classpath>
      <formatter type="xml" />
      <batchtest fork="yes" todir="${build.test.dir}">
        <fileset dir="${build.src.dir}">
          <include name="${test.files}" />
        </fileset>
      </batchtest>
    </junit>
    <!-- Build report in HTML format. -->
    <junitreport todir="${build.test.dir}">
      <fileset dir="${build.test.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${build.test.dir}" />
    </junitreport>
    <!-- remove scenario dir -->
    <delete dir="${build.test.dir}/scenario" />
    <echo message="JUnit results in ${build.test.dir}/index.html" />
  </target>
  <!-- *********************************************************************** -->
  <target name="j2h" depends="checkstyle"
          description="Create a html version of source code.">
    <taskdef name="java2html" classname="com.java2html.Java2HTMLTask" classpath="${lib.ant.dir}/j2h.jar" />
    <java2html title="Example" simple="no" tabsize="2" marginsize="2" header="true" footer="true"
               destination="${build.src_html.dir}">
      <fileset dir="${build.src.dir}" includes="**/*.java" />
    </java2html>
    <echo message="j2h files can be found in ${build.src_html.dir}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="locc" depends="compile" description="Compute the total size of the source code.">
    <taskdef name="locc" classname="csdl.locc.tools.ant.LOCCTaskdef"
                         classpath="${lib.ant.dir}/locc-all-5.1.jar"/>
    <mkdir dir="${build.size.dir}"/>
    <locc sizetype="javaline" outfile="locc-all.xml" outdir="${build.size.dir}" failOnError="yes">
      <fileset dir="${build.src.dir}" includes="**/*.java" />
    </locc>
    <locc sizetype="javaline" outformat="csv" outfile="locc-all.csv" outdir="${build.size.dir}" failOnError="yes">
      <fileset dir="${build.src.dir}" includes="**/*.java" />
    </locc>
    <echo message="Size info can be found in ${build.size.dir}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="javadoc" depends="checkstyle"
          description="Creates the JavaDoc API documentation.">
    <mkdir dir="${build.api.dir}" />
    <!-- copy images -->
    <copy todir="${build.api.dir}">
      <fileset dir="${resource.dir}/overview" includes="images/*.jpg,images/*.gif"/>
    </copy>
    <!-- create javadoc -->
    <javadoc packagenames="**.*"
             classpath="${java.class.path}"
             sourcepath="${build.src.dir}"
             destdir="${build.api.dir}"
             author="true"
             version="true"
             use="true"
             package="true"
             splitindex="true"
             overview="${resource.dir}/overview/overview.html"
             noindex="false"
             windowtitle="${name} ${release.version} API"
             doctitle="${name} ${release.version} API" />
    <echo message="Javadoc can be found in ${build.api.dir}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="library" depends="i18n"
          description="Creates the jar files containing all the java classes.">
    <mkdir dir="${build.library.dir}" />
    <!-- The jar file of the project -->
    <jar destfile="${build.library.dir}/${name}.jar">
      <fileset dir="${build.dest.dir}">
        <include name="**/*.class" />
        <include name="**/hibernate.cfg.xml" />
        <include name="**/*.hbm.xml" />
        <include name="**/*.properties" />
        <exclude name="${test.files}" />
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${author}" />
      </manifest>
    </jar>
  </target>
  <!-- *********************************************************************** -->
  <target name="libconf" depends="post-init"
          description="Creates the jar files containing all the files in conf directory.">
    <mkdir dir="${build.libconf.dir}" />
    <!-- Create temp dir to copy conf files first. -->
    <mkdir dir="${build.libconf.dir}/temp" />
    <mkdir dir="${build.libconf.dir}/temp/conf" />
    <copy todir="${build.libconf.dir}/temp/conf">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${conf.dir}" />
    </copy>
    <!-- Create conf jar -->
    <jar destfile="${build.libconf.dir}/${name}-conf.jar">
      <fileset dir="${build.libconf.dir}/temp" />
      <manifest>
        <attribute name="Built-By" value="${author}" />
      </manifest>
    </jar>
    <!-- delete temp dir -->
    <delete dir="${build.libconf.dir}/temp" />
  </target>
  <!-- *********************************************************************** -->
  <target name="executable">
    <path id="project.class.path">
      <fileset dir="${structure.dir}/lib">
        <include name="**/*.jar" />
      </fileset>
    </path>
    <!-- Convert path, depending on os -->
    <pathconvert targetos="${os.target.name}" property="bat.classpath">
      <path refid="project.class.path" />
      <mapper><chainedmapper>
      <flattenmapper />
      <globmapper from="*" to="lib/*" />
      </chainedmapper></mapper>
    </pathconvert>
    <!-- Reference to JRE -->
    <condition property="jreloc" value="&quot;%JAVA_HOME%\jre\bin\java&quot;">
      <equals arg1="${os.target.name}" arg2="windows" />
    </condition>
    <condition property="jreloc" value="java">
      <equals arg1="${os.target.name}" arg2="unix" />
    </condition>
    <!-- Create batch/script file (windows or unix): -Dsun.java2d.noddraw=true -->
    <echo file="${structure.dir}/${executable.file.name}.bat"
      message="${jreloc} -Xms${executable.memory}m -Xmx${executable.memory}m -cp ${bat.classpath} ${executable.run} ${executable.args}" />
    <chmod file="${structure.dir}/${executable.file.name}.bat" perm="ug+rx" />
  </target>
  <!-- *********************************************************************** -->
  <target name="dist_macos">
    <property name="dist_macos_app_name" value="${executable.file.longname}.app" />
    <property name="dist_macos_app" value="${dist_macos}/${dist_macos_app_name}" />
    <property name="dist_macos_contents" value="${dist_macos_app}/Contents" />
    <property name="dist_macos_info" value="${dist_macos_contents}/Info.plist" />
    <jarbundler dir="${dist_macos}"
                name="${executable.file.longname}"
                mainclass="${executable.run}"
                icon="logo-128x128.icns"
                version="${release.version}"
                infostring="${executable.file.longname} ${release.version} (build: ${release.time}) application (c) ${YEARSTAMP}"
                shortname="ECMOjo"
                bundleid="${executable.run}"
                signature="ECJO"
                jvmversion="1.4+"
                vmoptions="-Xms${executable.memory}m -Xmx${executable.memory}m -Xss8M"
                arguments="${executable.args}"
                workingdirectory="$APP_PACKAGE/Contents/Resources/Java">
      <jarfileset dir="${structure.dir}/lib">
        <include name="**/*.jar" />
      </jarfileset>
    </jarbundler>
    <copy file="${resource.dir}/installer/Icons/logo-128x128.icns" todir="${dist_macos_contents}/Resources" />
    <copy todir="${dist_macos_contents}/Resources/Java">
      <fileset dir="${structure.dir}">
        <include name="scenario/**" />
        <include name="extra/**" />
      </fileset>
    </copy>
  </target>
  <!-- *********************************************************************** -->
  <target name="dist_mac_dmg">
    <!-- Identify size of MacOS distribution -->
    <length property="dmac.size" mode="all">
      <fileset dir="${dist_macos}" includes="**/*.*" />
    </length>
    <script language="javascript">
      <![CDATA[
        var length_bytes = project.getProperty("dmac.size");
        var length_kbytes = Math.round((length_bytes / 1024) * Math.pow(10,2) / Math.pow(10,2));
        var length_mbytes = Math.round((length_kbytes / 1024) * Math.pow(10,2) / Math.pow(10,2));
        project.setNewProperty("dmac.size.mb", length_mbytes+2);
      ]]>
    </script>
    <!-- Create compressed disk image -->
    <exec dir="." executable="/bin/bash">
      <arg value="-c" />
      <arg value="${jarbundler.dir}/mkdmg.sh ${dist_macos} ${dist_macos_base} ${dist_name} ${dmac.size.mb}" />
    </exec>
  </target>
  <!-- *********************************************************************** -->
  <target name="dist_win">
    <property name="dist_win_app_name" value="${executable.file.longname}" />
    <property name="dist_win_app" value="${dist_win}/${dist_win_app_name}" />
    <copy todir="${dist_win_app}">
      <fileset dir="${structure.dir}">
        <include name="lib/**" />
        <include name="scenario/**" />
        <include name="extra/**" />
      </fileset>
    </copy>
    <launch4j>
      <config jarPath="${dist_win_app}/lib/ecmosim-app.jar"
              dontWrapJar="true"
              headerType="gui"
              outfile="${dist_win_app}/${executable.file.longname}.exe"
              cmdLine="${executable.args}"
              icon="${resource.dir}/installer/Icons/logo-32x32.ico">
        <classPath mainClass="${executable.run}">
          <cp>%EXEDIR%/lib/*.jar</cp>
        </classPath>
        <jre minVersion="1.4.0"
             initialHeapSize="${executable.memory}"
             maxHeapSize="${executable.memory}">
          <opt>-Xss8M</opt>
          <opt>-Dlaunch4j.exedir="%EXEDIR%"</opt>
          <opt>-Dlaunch4j.exefile="%EXEFILE%"</opt>
        </jre>
        <!--
        <versionInfo
          copyright="${YEARSTAMP}"/>
          fileVersion="2.4.0"
          txtFileVersion="${executable.file.longname} ${release.version} (build: ${release.time}) application (c) ${YEARSTAMP}"/>
          fileDescription="ECMOjo: ECMO simulation training"
          copyright="${YEARSTAMP}"
          productName="${executable.file.longname}"
          companyName="TRI"
          internalName="${executable.file.name}"
          originalFilename="${executable.file.name}.exe"
        <messages>
          <startupErr>Error with startup</startupErr>
          <bundledJreErr>Unable to find Java runtime</bundledJreErr>
          <jreVersionErr>Impropre Java version</jreVersionErr>
          <launcherErr>Error with Launch4j</launcherErr>
        </messages>
        -->
      </config>
    </launch4j>
  </target>
  <!-- *********************************************************************** -->
  <target name="dist_src">
    <tar destfile="${dist_src_base}/${dist_name}.tar.gz"
         compression="gzip">
      <tarfileset dir="${basedir}">
        <exclude name="build/**" />
        <exclude name="doc/**" />
        <exclude name="test/**" />
        <exclude name="www/**" />
      </tarfileset>
    </tar>
  </target>
  <!-- *********************************************************************** -->
  <target name="webjnlp">
    <!-- create jnlp file -->
    <jnlp toFile="${structure.dir}/${executable.file.name}.jnlp"
          spec="1.0+" 
          encoding="utf-8"
          codebase="${webstart.url}/webstart"
          href="${executable.file.name}.jnlp">
      <information>
        <title>${webstart.title}</title>
        <vendor>${webstart.author}</vendor>
        <homepage href="${webstart.url}" />
        <description>${webstart.description}</description>
        <icon href="webstart-logo.gif" />
      </information>
      <security>
        <all_permissions />
      </security>
      <resources>
        <j2se version="1.5+" href="http://java.sun.com/products/autodl/j2se" initial_heap_size="${executable.memory}M" max_heap_size="${executable.memory}M"/>
        <jar href="${name}.jar" />
        <fileset dir="${structure.dir}/unpacked" includes="*.jar">
          <exclude name="${name}.jar" />
        </fileset>
        <!-- <property name="sun.java2d.noddraw" value="true" /> -->
        <property name="webstart" value="true" />
        <property name="webstart.dir" value="${webstart.scenario.dir}" />
        <property name="webstart.extra.dir" value="${webstart.url}/webstart/extra" />
        <!-- Java3D extensions (Depending on Project if to be added) -->
        <!-- <extension href="https://j3d-webstart.dev.java.net/release/java3d-1.3.2.jnlp"/> -->
      </resources>
      <application_desc main_class="${executable.run}">
        <argument>${executable.args}</argument>
      </application_desc>
    </jnlp>
  </target>
  <!-- *********************************************************************** -->
  <target name="obfuscate" depends="library"
          description="Obfuscates files so they are not anymore readable."> 
    <!-- Proguard code obfuscator -->
    <mkdir dir="${build.obfuscate.dir}" />
    <delete file="${build.obfuscate.dir}/${name}.jar" />
    <taskdef resource="proguard/ant/task.properties" classpath="${lib.ant.dir}/proguard.jar" />
    <!-- Please note that [obfuscate="false"]: it's an open source project... -->
    <proguard printseeds="true" optimize="false" obfuscate="false" ignorewarnings="true"
              printmapping="${resource.dir}/obfuscate/proguard-mapping-${name}-${release.version}-${release.time}.txt" 
              defaultpackage="cg">
      <!-- Specify the input jars, output jars, and library jars. -->
      <injar  file="${build.library.dir}/${name}.jar" />
      <outjar file="${build.obfuscate.dir}/${name}.jar" />
      <libraryjar file="${lib.rt.dir}" /> 
      <libraryjar file="${lib.jsse.dir}" /> <!-- maybe not needed in later releases? -->
      <libraryjar file="${lib.project.dir}">
        <fileset dir="${lib.project.dir}" includes="${library.files}" />
      </libraryjar>
      <!-- Preserve all public applications. -->
      <keepclasseswithmembers access="public">
        <method access    ="public static"
                type      ="void"
                name      ="main"
                parameters="java.lang.String[]" />
      </keepclasseswithmembers>
      <!-- Preserve all native method names and the names of their classes. -->
      <keepclasseswithmembernames>
        <method access="native" />
      </keepclasseswithmembernames>
      <!-- Preserve custom Java Swing UI elements. -->
      <keepclassmembers extends="javax.swing.plaf.ComponentUI">
        <method access="public static"
                type="javax.swing.plaf.ComponentUI"
                name="createUI"
                parameters="javax.swing.JComponent" />
      </keepclassmembers>
      <!-- Enums need to be preserved, as of Java 5.0 they are self-modifying! -->
      <keepclassmembers extends="java.lang.Enum">
        <method access="public static"
                type="**[]"
                name="values"
                parameters="" />
        <method access="public static"
                type="**"
                name="valueOf"
                parameters="java.lang.String" />
      </keepclassmembers>
      <!-- Explicitly preserve all serialization members. The Serializable
           interface is only a marker interface, so it wouldn't save them.
           You can comment this out if your library doesn't use serialization.
           If your code contains serializable classes that have to be backward
           compatible, please refer to the manual. -->
      <!-- NOT NEEDED FOR THIS PROJECT  
        <keepnames implements="java.io.Serializable"/>
      -->
      <keepclassmembers implements="java.io.Serializable">
          <field  access    ="final"
                  type      ="long"
                  name      ="serialVersionUID" />
          <field  access    ="!static !transient" />
          <method access    ="private"
                  type      ="void"
                  name      ="writeObject"
                  parameters="java.io.ObjectOutputStream" />
          <method access    ="private"
                  type      ="void"
                  name      ="readObject"
                  parameters="java.io.ObjectOutputStream" />
          <method type      ="java.lang.Object"
                  name      ="writeReplace"
                  parameters="" />
          <method type      ="java.lang.Object"
                  name      ="readResolve"
                  parameters="" />
      </keepclassmembers>
    </proguard>
    <!-- Sign all the jars (Eclipse problem: Preferences>Java>Installed JRE: Put JDK instead of JRE directory) -->
    <signjar alias="${keystore.alias}" keystore="${keystore.file}" storepass="${keystore.storepass}">
      <fileset dir="${build.obfuscate.dir}" includes="*.jar" />
    </signjar>
    <echo message="Obfuscated and signed jar files can be found in ${build.obfuscate.dir}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="application" depends="library, libconf"
          description="Create executable(s) of the software for platform testing.">
    <!-- copy external jar files -->
    <copy todir="${build.app.dir}/lib">
      <fileset dir="${lib.project.dir}" includes="${library.files}" />
    </copy>
    <!-- copy project jar files -->
    <copy todir="${build.app.dir}/lib">
      <fileset dir="${build.library.dir}" />
    </copy>
    <copy todir="${build.app.dir}/lib">
      <fileset dir="${build.libconf.dir}" />
    </copy>
    <!-- copy scenario directory -->
    <copy todir="${build.app.dir}/scenario">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${scenario.dir}/write" />
    </copy>
    <!-- make logs and scores directories -->
    <mkdir dir="${build.app.dir}/scenario/logs" />
    <mkdir dir="${build.app.dir}/scenario/scores" />
    <copy todir="${build.app.dir}/scenario" overwrite="true">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${scenario.dir}/write-over" />
    </copy>
    <!-- copy extra directory -->
    <copy todir="${build.app.dir}/extra" overwrite="true">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${extra.dir}" />
    </copy>
    <copy todir="${build.app.dir}/extra" overwrite="true">
      <fileset dir="${extra-special.dir}/${specialdir}" />
    </copy>
    <!-- Copy license file -->
    <copy file="LICENSE.txt" todir="${build.app.dir}" />
    <copy file="README" todir="${build.app.dir}" />
    <!-- Determine build platform [windows, mac, unix] -->
    <condition property="os.target.name" value="windows">
        <os family="windows" />
    </condition>
    <condition property="os.target.name" value="unix">
        <os family="unix" />
    </condition>
    <!-- Create executable files. -->
    <for list="${executables.list}" param="executable" delimiter="+">
      <sequential>
        <propertyregex property="exe.longname" select="\1" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <propertyregex property="exe.file" select="\2" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <propertyregex property="exe.memory" select="\3" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <propertyregex property="exe.class" select="\4" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <propertyregex property="exe.args" select="\5" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <antcall target="executable">
          <param name="executable.file.longname" value="${exe.longname}" />
          <param name="executable.file.name" value="${exe.file}" />
          <param name="executable.memory" value="${exe.memory}" />
          <param name="executable.run" value="${exe.class}" />
          <param name="executable.args" value="${exe.args}" />
          <param name="structure.dir" value="${build.app.dir}" />
        </antcall>
      </sequential>
    </for>
    <echo message="The ${name} applications can be found in ${build.app.dir}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="dist" depends="application"
          description="Creates distributions for various platforms.">
    <!-- Prepare dist directory -->
    <delete dir="${dist.dir}" followsymlinks="false" />
    <mkdir dir="${dist.dir}" />
    <!-- Prepare Mac dist directory -->
    <delete dir="${dist_macos}" followsymlinks="false" />
    <mkdir dir="${dist_macos}" />
    <copy file="LICENSE.txt" todir="${dist_macos}" />
    <copy file="README" todir="${dist_macos}" />
    <!-- Prepare Win dist directory -->
    <delete dir="${dist_win}" followsymlinks="false" />
    <mkdir dir="${dist_win}" />
    <copy file="LICENSE.txt" todir="${dist_win}" />
    <copy file="README" todir="${dist_win}" />
    <!-- Create executable files. -->
    <for list="${executables.list}" param="executable" delimiter="+">
      <sequential>
        <propertyregex property="exe.longname" select="\1" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes"/>
        <propertyregex property="exe.file" select="\2" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes"/>
        <propertyregex property="exe.memory" select="\3" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes"/>
        <propertyregex property="exe.class" select="\4" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes"/>
        <propertyregex property="exe.args" select="\5" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" override="yes"/>
        <antcall>
          <target name="dist_macos" />
          <target name="dist_win" />
          <param name="executable.file.longname" value="${exe.longname}" />
          <param name="executable.file.name" value="${exe.file}" />
          <param name="executable.memory" value="${exe.memory}" />
          <param name="executable.run" value="${exe.class}" />
          <param name="executable.args" value="${exe.args}" />
          <param name="structure.dir" value="${build.app.dir}" />
        </antcall>
      </sequential>
    </for>
    <antcall target="dist_src" />
    <antcall target="dist_mac_dmg" />
    <zip destfile="${dist_win_base}/${dist_name}.zip" basedir="${dist_win_base}/${dist_name}" />
    <echo message="The ${name} distributions can be found in ${dist.dir}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="webstart" depends="obfuscate, libconf"
          description="Creates Java Web Start executable(s).">
    <!-- Create scenario.zip and put it into jar -->
    <delete file="${build.webstart.dir}/${name}-scenario.jar" />
    <mkdir dir="${build.webstart.dir}/scenario" />
    <copy todir="${build.webstart.dir}/scenario/write">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${scenario.dir}/write" />
    </copy>
    <copy todir="${build.webstart.dir}/scenario/write-over">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${scenario.dir}/write-over" />
    </copy>
    <zip destfile="${build.webstart.dir}/scenario.zip"
         basedir="${build.webstart.dir}/scenario"
         includes="**/*" />
    <delete dir="${build.webstart.dir}/scenario" />
    <jar destfile="${build.webstart.dir}/${name}-scenario.jar">
      <fileset dir="${build.webstart.dir}">
        <include name="scenario.zip" />
      </fileset>
      <manifest><attribute name="Built-By" value="${author}"/></manifest>
    </jar>
    <delete file="${build.webstart.dir}/scenario.zip" />
    <!-- copy extra directory -->
    <copy todir="${build.webstart.dir}/extra" overwrite="true">
      <mapper type="regexp" from="${subdirs}" to="\3" />
      <fileset dir="${extra.dir}"/>
    </copy>
    <copy todir="${build.webstart.dir}/extra" overwrite="true">
      <fileset dir="${extra-special.dir}/${specialdir}" />
    </copy>
    <!-- Copy external jar files -->
    <copy todir="${build.webstart.dir}">
      <fileset dir="${lib.project.dir}" includes="${library.files}" excludes="${webstart.files.exclude}"/>
    </copy>
    <!-- Copy project jar files -->
    <copy todir="${build.webstart.dir}">
      <fileset dir="${build.library.dir}" />
    </copy>
    <copy todir="${build.webstart.dir}">
      <fileset dir="${build.libconf.dir}" />
    </copy>
    <!-- Copy info -->
    <copy todir="${build.webstart.dir}">
      <fileset dir="${doc.dir}" includes="*.rss2" />
    </copy>  
    <!-- repack all jars -->
    <delete dir="${build.webstart.dir}/packed" />
    <delete dir="${build.webstart.dir}/unpacked" />
    <mkdir dir="${build.webstart.dir}/packed" />
    <mkdir dir="${build.webstart.dir}/unpacked" />
    <taskdef name="pack200" classname="com.sun.tools.apache.ant.pack200.Pack200Task" classpath="${lib.ant.dir}/Pack200Task.jar"/>
    <for param="jarpath">
      <fileset dir="${build.webstart.dir}" includes="*.jar" />
      <sequential>
        <propertyregex override="yes"
          property="pack.jar" input="@{jarpath}"
          regexp=".*[\\\/]([^\\\/]*)\.jar" select="\1.jar" />
        <pack200 src="${build.webstart.dir}/${pack.jar}" destfile="${build.webstart.dir}/unpacked/${pack.jar}" repack="true" />
      </sequential>
    </for>
    <delete>
      <fileset dir="${build.webstart.dir}" includes="*.jar" />
    </delete>
    <!-- Sign all the jars (Eclipse problem: Preferences>Java>Installed JRE: Put JDK instead of JRE directory) -->
    <signjar alias="${keystore.alias}" keystore="${keystore.file}" storepass="${keystore.storepass}">
      <fileset dir="${build.webstart.dir}/unpacked" includes="*.jar" />
    </signjar>
    <!-- Pack200: final pack -->
    <for param="jarpath">
      <fileset dir="${build.webstart.dir}/unpacked" includes="*.jar" />
      <sequential>
        <propertyregex override="yes"
          property="pack.jar" input="@{jarpath}"
          regexp=".*[\\\/]([^\\\/]*)\.jar" select="\1.jar" />
        <pack200 src="${build.webstart.dir}/unpacked/${pack.jar}" destfile="${build.webstart.dir}/packed/${pack.jar}.pack.gz" gzipoutput="true" />
        <echo file="${build.webstart.dir}/${pack.jar}.var">URI: packed/${pack.jar}.pack.gz
Content-Type: x-java-archive
Content-Encoding: pack200-gzip

URI: unpacked/${pack.jar}
Content-Type: x-java-archive
        </echo>
      </sequential>
    </for>
    <copy file="${resource.dir}/webstart/.htaccess" todir="${build.webstart.dir}" />
    <!-- Copy logo and required runtime version for installer -->
    <copy file="${resource.dir}/webstart/webstart-logo.gif" todir="${build.webstart.dir}" />
    <copy file="${resource.dir}/webstart/RequiredWebstartRunner.version" todir="${build.webstart.dir}" />
    <!-- Create jnlp files for web start. -->
    <taskdef classpath="${lib.ant.dir}/roxes-ant-tasks-1.2-2004-01-30.jar" resource="com/roxes/tools/ant/taskdefs.properties" />
    <for list="${executables.list}" param="executable" delimiter="+">
      <sequential>
        <propertyregex property="exe.file" select="\1" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <propertyregex property="exe.memory" select="\2" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <propertyregex property="exe.class" select="\3" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <propertyregex property="exe.args" select="\4" input="@{executable}" regexp="([^,]*),([^,]*),([^,]*),([^,]*)" override="yes" />
        <antcall target="webjnlp">
          <param name="executable.file.name" value="${exe.file}" />
          <param name="executable.memory" value="${exe.memory}" />
          <param name="executable.run" value="${exe.class}" />
          <param name="executable.args" value="${exe.args}" />
          <param name="structure.dir" value="${build.webstart.dir}" />
        </antcall>
      </sequential>
    </for>
    <!-- Copy .html for applet. -->
    <path id="applet.class.path">
      <fileset dir="${build.webstart.dir}/unpacked" includes="*.jar" />
    </path>	
    <pathconvert property="applet.class.path.property" refid="applet.class.path" pathsep=",">
      <mapper type="flatten" />
    </pathconvert>
    <copy file="${resource.dir}/webstart/applet.inc" todir="${build.webstart.dir}" overwrite="true">
      <filterset>
        <filter token="applet.class.main" value="${prg.classfile}" />
        <filter token="applet.class.codebase" value="${webstart.url}/webstart/unpacked" />
        <filter token="applet.class.archive" value="${applet.class.path.property}" />
        <filter token="applet.param.width" value="800" />
        <filter token="applet.param.height" value="600" />
        <filter token="applet.class.image" value="applet-loading.gif" />
        <filter token="applet.class.boxmessage" value="Loading ECMOjo..." />
        <filter token="applet.class.args" value="noargs" />
        <filter token="applet.class.webstart.dir" value="${webstart.scenario.dir}" />
        <filter token="applet.class.webstart.extra.dir" value="${webstart.url}/webstart/extra" />
      </filterset>
    </copy>
    <copy todir="${build.webstart.dir}">
      <fileset dir="${resource.dir}/webstart" includes="jquery*,applet*" />
    </copy>  
    <!-- Output info -->
    <echo message="The ${name} Web Start Application can be found in ${build.webstart.dir}"/>  </target>
  <!-- *********************************************************************** -->
  <target name="warfile" depends="library, libconf"
          description="Jakarta *.war File Creator.">
    <mkdir dir="${build.webapp.dir}" />
    <!-- copy web files and WEB-INF stuff -->
    <copy todir="${build.webapp.dir}">
      <fileset dir="${web.dir}" />
    </copy>
    <!-- Copy external jar files -->
    <mkdir dir="${build.webapp.dir}/WEB-INF/lib" />
    <copy todir="${build.webapp.dir}/WEB-INF/lib">
      <fileset dir="${lib.project.dir}" includes="${library.files}" excludes="servlet-api.jar" />
    </copy>
    <!-- Copy project jar files -->
    <copy todir="${build.webapp.dir}/WEB-INF/lib">
      <fileset dir="${build.library.dir}" />
    </copy>
    <copy todir="${build.webapp.dir}/WEB-INF/lib">
      <fileset dir="${build.libconf.dir}" />
    </copy>
    <!-- Build war file -->
    <mkdir dir="${build.war.dir}" />
    <delete file="${build.war.dir}/${name}.war" />
    <jar jarfile="${build.war.dir}/${name}.war">
      <fileset dir="${build.webapp.dir}" includes="**" />
    </jar>
    <echo message="The ${name}.war file can be found in ${build.war.dir}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="webapp-reload" description="webapp: Reloads the Web Application" depends="post-init">
    <reload url="${webapp.manager.url}" username="${webapp.username}" password="${webapp.password}" path="/${webapp.name}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="webapp-deploy" description="webapp: Deploys the Web Application" depends="warfile">
    <deploy url="${webapp.manager.url}" username="${webapp.username}" password="${webapp.password}" path="/${webapp.name}"
            war="${build.war.dir}/${name}.war" />
  </target>
  <!-- *********************************************************************** -->
  <target name="webapp-undeploy" description="webapp: Undeploys the Web Application" depends="post-init">
    <undeploy url="${webapp.manager.url}" username="${webapp.username}" password="${webapp.password}" path="/${webapp.name}" />
  </target>
  <!-- *********************************************************************** -->
  <!-- Fix for redeploy/file lock problem (ehcache-1.1.jar):
       Edit %CATALINA_HOME%\conf\context.xml. Find the root <Context> and add these two attributes:
       <Context antiJARLocking="true" antiResourceLocking="true"> -->
  <target name="webapp-redeploy" description="webapp: Redeploys the Web Application" depends="webapp-undeploy,webapp-deploy">
    <!-- does undeploy + deploy (webapp needs to be deployed beforehand) -->
  </target>
  <!-- *********************************************************************** -->
  <target name="webapp-start" description="webapp: Start the Web Application" depends="post-init">
    <start url="${webapp.manager.url}" username="${webapp.username}" password="${webapp.password}" path="/${webapp.name}" />
  </target>
  <!-- *********************************************************************** -->
  <target name="webapp-stop" description="webapp: Stop the Web Application" depends="post-init">
    <stop url="${webapp.manager.url}" username="${webapp.username}" password="${webapp.password}" path="/${webapp.name}" />
  </target>
</project>
